.. _extractor:

Extractor
=========


Extractor is a tool that extracts URIs from a given RDF file, and then turns these URIs into query terms. The purpose of Extractor is to find URI that cannot be reached in the given RDF. These URIs are usually generated by typical format translators and violate linked data design rules proposed by Tim Berners-Lee, i.e., they cannot be looked up in the Web. By generating query terms for them, other X2R tools, USS and UMS, can help in finding or minting better URIs.


RDF is comprised of three types of nodes: URI references, blank nodes or literals. 


Input/Output
------------

**Input**: RDF serialization formats.

======== =========== =================================================
value    name        reference
======== =========== =================================================
json     RDF/JSON    http://n2.talis.com/wiki/RDF_JSON_Specification
ntriples N-Triples   http://www.w3.org/TR/n-triples/
turtle   Turtle      http://www.dajobe.org/2004/01/turtle
rdfxml   RDF/XML     http://www.w3.org/TR/rdf-syntax-grammar
n3       N3          http://www.w3.org/2000/10/swap/grammar/n3
rdfa     RDFa        http://www.w3.org/TR/rdfa-core/
======== =========== =================================================



**Output**:

Components of X2R share a common data exchange format: *X2R data exchange format*. The output of Extractor is in the foramt of X2R data exchange format. The detail spec. of this exchange format is described below. Note that the "replacedURI" name/value pair is intentionally left blank in the context of Extractor (the potential replacedURI is obtained in the context of USS, and is applied in the context of Mapper). 

.. code-block:: json

 { "metadata": [],
   "mapping": 
     [
         {
          "status": status value,
          "originalURI": original URI value, 
          "replacedURI": updated URI value, 
          "term": term value
          }
     ]
  }

===========  ==================================================
name         value range/format
===========  ==================================================
status       Range: {"N/A", "200", "303", "error"}
originalURI  A URI that can be found in input file and is valid
replacedURI  A valid URI
term         A string
===========  ==================================================

Example
-------


.. code-block:: json

 { "metadata": [],
   "mapping": 
     [
         {
          "status": "N/A", 
          "replacedURI": "http://replaced_test1", 
          "term": "facilities store245", 
          "originalURI": "http://140.109.21.188/facilities#store245"
          }, 
         {
          "status": "N/A", 
          "replacedURI": "http://replaced_test2", 
          "term": "facilities store244", 
          "originalURI": "http://140.109.21.188/facilities#store244"
         }
     ]
  }


Design
-------

Process
^^^^^^^

Major components
^^^^^^^^^^^^^^^^




**Tokenizer** is a major component of extractor. It aims to tokenize the tail of extracted URIs into word chuncks that can then be used as query terms to find better URIs.  

In X2R Extractor, a tokenizer should implement two methods, tokenizeArr(array $arr) and tokenizeStr($str). 




.. figure:: ./figs/tok_1.PNG
     :scale: 80%
     :alt: test

     This is the caption of the figure (a simple paragraph).

.. figure:: ./figs/tok_2.PNG
     :scale: 80%
     :alt: test

     This is the caption of the figure (a simple paragraph). 

X2R currently support two tokenizers, delimited-based tokenizer and cased-based tokenizer.


